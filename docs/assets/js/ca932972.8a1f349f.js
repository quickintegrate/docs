"use strict";(self.webpackChunkuser_documentation=self.webpackChunkuser_documentation||[]).push([[6333],{1495:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>a,default:()=>p,frontMatter:()=>c,metadata:()=>l,toc:()=>d});var i=n(5893),r=n(1151),o=n(4996);const c={},a=void 0,l={id:"QuickIntegrate_Overview/Execute",title:"Execute",description:"APIs after development are deployed and Executed over quickintegrate platform cloud.",source:"@site/docs/QuickIntegrate_Overview/Execute.md",sourceDirName:"QuickIntegrate_Overview",slug:"/QuickIntegrate_Overview/Execute",permalink:"/docs/docs/QuickIntegrate_Overview/Execute",draft:!1,unlisted:!1,editUrl:"https://github.com/quickintegrate/docs/tree/main/QuickIntegrate_Overview/Execute.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"Develop",permalink:"/docs/docs/QuickIntegrate_Overview/Develop"},next:{title:"Manage",permalink:"/docs/docs/QuickIntegrate_Overview/Manage"}},s={},d=[{value:"APIs after development are deployed and <strong>Executed</strong> over quickintegrate platform cloud.",id:"apis-after-development-are-deployed-and-executed-over-quickintegrate-platform-cloud",level:4},{value:"Deploy",id:"deploy",level:4},{value:"Testing",id:"testing",level:4},{value:"Traceability",id:"traceability",level:4},{value:"Deployment Flexibility",id:"deployment-flexibility",level:4}];function u(e){const t={h4:"h4",p:"p",strong:"strong",...(0,r.a)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsxs)(t.h4,{id:"apis-after-development-are-deployed-and-executed-over-quickintegrate-platform-cloud",children:["APIs after development are deployed and ",(0,i.jsx)(t.strong,{children:"Executed"})," over quickintegrate platform cloud."]}),"\n",(0,i.jsxs)(t.p,{children:[(0,i.jsx)("img",{src:(0,o.Z)("/img/overwiew/Execute.png")}),";"]}),"\n",(0,i.jsx)(t.h4,{id:"deploy",children:"Deploy"}),"\n",(0,i.jsx)(t.p,{children:"This module , one can deploy and run the projects. Multiple options available  to suit to deployment arch. styles. One can download the project which give source code zip file. Run the project on certain port and test it.Deploy to configured instance .Docker Container configuration for the project"}),"\n",(0,i.jsx)(t.h4,{id:"testing",children:"Testing"}),"\n",(0,i.jsx)(t.p,{children:"This module, one can record the test case execution which are defined by developer/designer. Testing team needs to record results of execution . This stores the historical executions for future reference."}),"\n",(0,i.jsx)(t.h4,{id:"traceability",children:"Traceability"}),"\n",(0,i.jsx)(t.p,{children:"This module , one can see Traceability visually and impact of change in any component in the entire  Requirement Matrix. Traceability from EPIC ->FEATURE ->STORY ->SERICE ->SERVICE DESIGN ->TESTCASE"}),"\n",(0,i.jsx)(t.h4,{id:"deployment-flexibility",children:"Deployment Flexibility"}),"\n",(0,i.jsx)(t.p,{children:"Deploy on Local machine , On-premises , Private Cloud , Public Cloud , VM , Dockers\r\nNo binding\r\nDeploy spring boot jar as per your architecture styles MicroServices , ESB, P2P, Integration Service , Public api , ,Standalone service"})]})}function p(e={}){const{wrapper:t}={...(0,r.a)(),...e.components};return t?(0,i.jsx)(t,{...e,children:(0,i.jsx)(u,{...e})}):u(e)}},1151:(e,t,n)=>{n.d(t,{Z:()=>a,a:()=>c});var i=n(7294);const r={},o=i.createContext(r);function c(e){const t=i.useContext(o);return i.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function a(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:c(e.components),i.createElement(o.Provider,{value:t},e.children)}}}]);