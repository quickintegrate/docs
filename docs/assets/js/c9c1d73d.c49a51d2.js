"use strict";(self.webpackChunkuser_documentation=self.webpackChunkuser_documentation||[]).push([[677],{7542:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>a,contentTitle:()=>c,default:()=>p,frontMatter:()=>i,metadata:()=>d,toc:()=>l});var r=t(5893),o=t(1151),s=t(4996);const i={sidebar_position:3,slug:"mq-connector",sidebar_label:"MQ"},c="MQ Connector",d={id:"Core Development/Connectors/MQ",title:"MQ Connector",description:"Java Message Service (JMS Connector) enables sending and receiving messages to queues and topics for any message service that implements the JMS specification. JMS is a widely used API for message-oriented middleware. It enables the communication between different components of a distributed application to be loosely coupled, reliable, and asynchronous. The main features of JMS Connector include:",source:"@site/docs/Core Development/Connectors/MQ.md",sourceDirName:"Core Development/Connectors",slug:"/Core Development/Connectors/mq-connector",permalink:"/Core Development/Connectors/mq-connector",draft:!1,unlisted:!1,editUrl:"https://github.com/quickintegrate/docs/tree/main/Core Development/Connectors/MQ.md",tags:[],version:"current",sidebarPosition:3,frontMatter:{sidebar_position:3,slug:"mq-connector",sidebar_label:"MQ"},sidebar:"tutorialSidebar",previous:{title:"REST",permalink:"/Core Development/Connectors/rest-connector"},next:{title:"FILE",permalink:"/Core Development/Connectors/file-connector"}},a={},l=[{value:"Configuring MQ Connector",id:"configuring-mq-connector",level:3},{value:"Write MQ Operation",id:"write-mq-operation",level:2},{value:"Read MQ Operation",id:"read-mq-operation",level:2}];function h(e){const n={h1:"h1",h2:"h2",h3:"h3",p:"p",strong:"strong",...(0,o.a)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(n.h1,{id:"mq-connector",children:"MQ Connector"}),"\n",(0,r.jsxs)(n.p,{children:["Java Message Service (",(0,r.jsx)(n.strong,{children:"JMS Connector"}),") enables sending and receiving messages to queues and topics for any message service that implements the JMS specification. JMS is a widely used API for message-oriented middleware. It enables the communication between different components of a distributed application to be loosely coupled, reliable, and asynchronous. The main features of ",(0,r.jsx)(n.strong,{children:"JMS Connector"})," include:"]}),"\n",(0,r.jsx)(n.p,{children:"Publish and subscribe pattern support on any given destination"}),"\n",(0,r.jsx)(n.p,{children:"Listen and reply pattern support on any given destination"}),"\n",(0,r.jsx)(n.p,{children:"Publish and consume pattern support on any given destination, with a fixed or temporary reply queue"}),"\n",(0,r.jsxs)(n.p,{children:["Drag and drop the ",(0,r.jsx)(n.strong,{children:"MQ Connector"})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:(0,s.Z)("/img/Connectors/JMS_connector.png")}),";"]}),"\n",(0,r.jsx)(n.h3,{id:"configuring-mq-connector",children:"Configuring MQ Connector"}),"\n",(0,r.jsxs)(n.p,{children:["left click on connector, you can define the ",(0,r.jsx)(n.strong,{children:"MQ Connector"})," configration"]}),"\n",(0,r.jsx)(n.h2,{id:"write-mq-operation",children:"Write MQ Operation"}),"\n",(0,r.jsx)(n.p,{children:"To perform write operation on MQ, provide queue name and input payload."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:(0,s.Z)("/img/Connectors/JMS/JMS_config.png")}),";"]}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Fields"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{children:"Example"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Type"}),(0,r.jsx)("td",{children:"Read/Write"}),(0,r.jsx)("td",{children:"Write"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Datasource Name"}),(0,r.jsx)("td",{children:"Datasource Name which is configured in connections properties"}),(0,r.jsx)("td",{children:"sampleds"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Queue Name"}),(0,r.jsx)("td",{children:"Name of the queue"}),(0,r.jsx)("td",{children:"sample"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Input"}),(0,r.jsx)("td",{children:"Input to the connectors"}),(0,r.jsx)("td",{children:"TransformedOutput"})]})]})]}),"\n",(0,r.jsx)(n.h2,{id:"read-mq-operation",children:"Read MQ Operation"}),"\n",(0,r.jsx)(n.p,{children:"To perform read operation on MQ, provide queue name and output payload. Please select operation(MOVE or DELETE) to define further course of action for the message read from the queue."}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:(0,s.Z)("/img/Connectors/MQ_Read_config.png")}),";"]}),"\n",(0,r.jsxs)("table",{children:[(0,r.jsx)("thead",{children:(0,r.jsxs)("tr",{children:[(0,r.jsx)("th",{children:"Fields"}),(0,r.jsx)("th",{children:"Description"}),(0,r.jsx)("th",{children:"Example"})]})}),(0,r.jsxs)("tbody",{children:[(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Type"}),(0,r.jsx)("td",{children:"Read/Write"}),(0,r.jsx)("td",{children:"Read"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Datasource Name"}),(0,r.jsxs)("td",{children:["Datasource Name which is configured in connections properties",(0,r.jsx)("a",{href:"/Core Development/Property Config/Connection Properties/DataSource JMS",target:"_blank",children:" Please refer the link for instructions on creating the datasource name"})]}),(0,r.jsx)("td",{children:"sampleds"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Queue Name"}),(0,r.jsx)("td",{children:"Name of the Queue"}),(0,r.jsx)("td",{children:"sample"})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Output"}),(0,r.jsx)("td",{children:"Output"}),(0,r.jsx)("td",{})]}),(0,r.jsxs)("tr",{children:[(0,r.jsx)("td",{children:"Operation"}),(0,r.jsx)("td",{children:"What Operations we want to perform using MQ connectors"}),(0,r.jsx)("td",{children:"Rest_output"})]})]})]}),"\n",(0,r.jsxs)(n.p,{children:[(0,r.jsx)("img",{src:(0,s.Z)("/img/Connectors/JMS/JMS_properties.png")}),";"]})]})}function p(e={}){const{wrapper:n}={...(0,o.a)(),...e.components};return n?(0,r.jsx)(n,{...e,children:(0,r.jsx)(h,{...e})}):h(e)}},1151:(e,n,t)=>{t.d(n,{Z:()=>c,a:()=>i});var r=t(7294);const o={},s=r.createContext(o);function i(e){const n=r.useContext(s);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),r.createElement(s.Provider,{value:n},e.children)}}}]);