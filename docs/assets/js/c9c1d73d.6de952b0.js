"use strict";(self.webpackChunkuser_documentation=self.webpackChunkuser_documentation||[]).push([[677],{7542:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>c,default:()=>u,frontMatter:()=>i,metadata:()=>a,toc:()=>l});var t=o(5893),s=o(1151),r=o(4996);const i={},c="MQ Connector",a={id:"Core Development/Connectors/MQ",title:"MQ Connector",description:"Java Message Service (JMS Connector) enables sending and receiving messages to queues and topics for any message service that implements the JMS specification. JMS is a widely used API for message-oriented middleware. It enables the communication between different components of a distributed application to be loosely coupled, reliable, and asynchronous. The main features of JMS Connector include:",source:"@site/docs/Core Development/Connectors/MQ.md",sourceDirName:"Core Development/Connectors",slug:"/Core Development/Connectors/MQ",permalink:"/docs/docs/Core Development/Connectors/MQ",draft:!1,unlisted:!1,editUrl:"https://github.com/quickintegrate/docs/tree/main/Core Development/Connectors/MQ.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"MAIL",permalink:"/docs/docs/Core Development/Connectors/MAIL"},next:{title:"REST Connect Connector",permalink:"/docs/docs/Core Development/Connectors/REST"}},d={},l=[{value:"MQ Connector",id:"mq-connector-1",level:4}];function p(e){const n={h1:"h1",h4:"h4",p:"p",strong:"strong",...(0,s.a)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(n.h1,{id:"mq-connector",children:"MQ Connector"}),"\n",(0,t.jsxs)(n.p,{children:["Java Message Service (",(0,t.jsx)(n.strong,{children:"JMS Connector"}),") enables sending and receiving messages to queues and topics for any message service that implements the JMS specification. JMS is a widely used API for message-oriented middleware. It enables the communication between different components of a distributed application to be loosely coupled, reliable, and asynchronous. The main features of ",(0,t.jsx)(n.strong,{children:"JMS Connector"})," include:"]}),"\n",(0,t.jsx)(n.p,{children:"Publish and subscribe pattern support on any given destination"}),"\n",(0,t.jsx)(n.p,{children:"Listen and reply pattern support on any given destination"}),"\n",(0,t.jsx)(n.p,{children:"Publish and consume pattern support on any given destination, with a fixed or temporary reply queue"}),"\n",(0,t.jsx)(n.h4,{id:"mq-connector-1",children:"MQ Connector"}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)("img",{src:(0,r.Z)("/img/Connectors/JMS_connector.png")}),";"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)("img",{src:(0,r.Z)("/img/Connectors/JMS/JMS_config.png")}),";"]}),"\n",(0,t.jsxs)(n.p,{children:[(0,t.jsx)("img",{src:(0,r.Z)("/img/Connectors/JMS/JMS_properties.png")}),";"]})]})}function u(e={}){const{wrapper:n}={...(0,s.a)(),...e.components};return n?(0,t.jsx)(n,{...e,children:(0,t.jsx)(p,{...e})}):p(e)}},1151:(e,n,o)=>{o.d(n,{Z:()=>c,a:()=>i});var t=o(7294);const s={},r=t.createContext(s);function i(e){const n=t.useContext(r);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function c(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:i(e.components),t.createElement(r.Provider,{value:n},e.children)}}}]);